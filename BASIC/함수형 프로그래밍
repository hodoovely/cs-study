
## 함수형 프로그래밍이란?




### 예상 답변



함수형 프로그래밍이란, 식이나 선언으로 수행되는 선언형 프로그래밍의 패러다임을 따르며 함수의 응용을 강조하는 프로그래밍입니다.

함수형 프로그래밍은 순수함수로 이루어져야하며, 문이 아닌 표현식만 사용되어야합니다.

또한 함수형 프로그래밍은 불변성을 유지해야하며, 일급함수와 고차함수의 특징 모두를 가지고 있어야합니다.

----



### 설명 더보기



#### 프로그래밍 패러다임

프로그래밍 패러다임은 프로그래머에게 프로그래밍의 관점을 갖게하고, 코드를 어떻게 작성할 것인지 결정하는 역할을 한다.
프로그래밍 패러다임은 크게 두 가지, 구체적으로는 세 가지로 나누어볼 수 있다.

***명령형 프로그래밍*** :
무엇을 할 것인지 나타내기보다는 어떻게 할 것인지를 설명하는 방식이다.
C, C++와 같이 수행되어야할 순차적인 처리과정을 포함하는 방식인 절차지향 프로그래밍과 C++, C#, JAVA와 같이 객체들의 집합으로 프로그램의 상호작용을 표현하는 객체지향 프로그래밍으로 나눌 수 있다.

***선언형 프로그래밍*** :
어떻게 할 것인지를 나타내기보다 무엇을 할 것인지를 설명하는 방식이다.
클로저, 하스켈, 리스프와 같이 순수 함수를 조합하고 소프트웨어를 만드는 방식인 함수형 프로그래밍이 이를 따르고 있다.

<br/>

#### 함수형 프로그래밍


함수형 프로그래밍이란 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임의 하나이다.

명령형 프로그래밍에서는 상태를 바꾸는 것을 강조하는 것과 달리, 함수형 프로그래밍은 함수의 응용을 강조한다.

프로그래밍 문이 아닌 식이나 선언으로 수행되는 선언형 프로그래밍 패러다임을 따르고 있다.

1930년대에 계산가능성, 결정문제, 함수정의, 함수응용과 재귀를 연구하기 위해 개발된 형식체계인 람다 대수에 근간을 두고 있다.

다수의 함수형 프로그래밍 언어들은 람다 연산을 발전시킨 것으로 볼 수 있다.

하스켈, F#, 오카멜, 얼랭과 같은 언어들은 함수형 프로그래밍에 특화된 언어이며 자바스크립트, 코틀린 등의 언어는 객체지향 프로그래밍으로 시작했지만 후에 함수형 프로그래밍도 지원하게 되었다.

자바나 C++는 최신버전에 함수형을 추가했다.

<br/>

#### 함수형 프로그래밍의 특징

***Pure Functions(순수함수)*** :
함수형 프로그래밍은 순수함수로 이루어져있어야한다.
순수함수란 외부의 상태 값을 참조하거나 외부의 상태값을 변경하지 않는 함수를 말한다.
또는 동일한 인자를 넣었을 때 동일한 값을 반환해야하며 언제 선언되었는지, 외부의 영향을 받으면 안 된다.

***Immutability(불변성)*** :
Immutability란 말 그대로 변경 불가능함을 의미한다.
Immutable한 객체는 객체가 가지고 있는 값을 변경할 수 없는 객체를 의미하며 값이 변경될 경우, 새로운 객체를 생성하고 변경된 값을 주입하여 반환해야한다.
함수형 프로그래밍은 불변성을 유지해야한다.

***Expressions Only(표현식만 사용)*** :
함수형 프로그래밍은 표현식만 사용해야한다.
따라서 if, switch, for과 같은 statement(문)는 사용할 수 없다.

***First-Class &High-Order Functions(일급함수와 고차함수)*** :
함수형 프로그래밍은 일급함수의 특징과 고차함수의 특징을 가지고 있어야한다.
일급함수는 함수를 언어에서 값으로 다룰 수 있으며 런타임에서 언제든지 정의할 수 있다.
변수나 데이터 구조 안에 함수를 담을 수 있어서 함수의 파라미터로 전달할 수 있고, 함수의 반환값으로 사용할 수 있다.
또한 할당에 사용된 이름과 관계 없이 고유한 구별이 가능하다.
그리고 함수를 리터럴로 바로 정의할 수 있다.
그리고 고차함수는 함수형 프로그래밍에서 원하는 인자를 받고 또 다른 함수를 리턴할 수 있는 구조이다.




